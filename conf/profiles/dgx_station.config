/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    DGX Station A100 profile (128 cores, 512GB RAM)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

params {
    config_profile_name        = 'DGX Station A100'
    config_profile_description = 'DGX Station A100 profile for 128 cores and 512GB RAM'
    
    // Maximum resource limits
    max_cpus   = 128
    max_memory = '512.GB'
    max_time   = '240.h'
}

process {
    // Standard defaults optimized for DGX Station
    cpus              = { check_max( 2    * task.attempt, 'cpus'     ) }
    memory            = { check_max( 8.GB * task.attempt, 'memory'   ) }
    time              = { check_max( 4.h  * task.attempt, 'time'     ) }

    errorStrategy     = { task.exitStatus in [71,104,134,137,139,140,143,255] ? 'retry' : 'finish' }
    maxRetries        = 2
    maxErrors         = '-1'

    // Process-specific resource requirements optimized for high-performance system
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'     ) }
        memory        = { check_max( 4.GB * task.attempt, 'memory'   ) }
        time          = { check_max( 2.h  * task.attempt, 'time'     ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
        maxForks      = 16  // Allow many concurrent low processes
    }
    withLabel:process_medium {
        cpus          = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
        maxForks      = 8   // Allow multiple medium processes
    }
    withLabel:process_high {
        cpus          = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 24.h   * task.attempt, 'time'   ) }
        maxForks      = 4   // Allow multiple high-resource processes
    }
    withLabel:process_long {
        time          = { check_max( 96.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 128.GB * task.attempt, 'memory' ) }
        maxForks      = 2   // Limit very memory-intensive processes
    }

    // Specific optimizations for clustering workflow on DGX
    withName:MASH_SKETCH {
        cpus   = 2
        memory = '4.GB'
        time   = '30.m'
    }
    withName:MASH_DIST {
        cpus   = 8
        memory = '16.GB'
        time   = '1.h'
    }
    withName:CLUSTER_GENOMES {
        cpus   = 4
        memory = '8.GB'
        time   = '30.m'
    }
    withName:SKA_BUILD {
        cpus   = 8
        memory = '16.GB'
        time   = '1.h'
    }
    withName:SKA_ALIGN {
        cpus   = 8
        memory = '16.GB'
        time   = '1.h'
    }
    withName:IQTREE_FAST {
        cpus   = 16
        memory = '32.GB'
        time   = '2.h'
    }
    withName:GUBBINS_CLUSTER {
        cpus     = 16
        memory   = '64.GB'
        time     = '6.h'
        maxForks = 4  // Allow multiple Gubbins processes
    }
    withName:USHER_BUILD {
        cpus   = 16
        memory = '32.GB'
        time   = '2.h'
    }
    withName:USHER_PLACE {
        cpus   = 8
        memory = '16.GB'
        time   = '1.h'
    }
}

executor {
    name = 'local'
    cpus = 128
    memory = '512.GB'
}